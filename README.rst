Future Briefcase Android Gradle Template
========================================

A `Cookiecutter <https://github.com/cookiecutter/cookiecutter/>`__ template for
building Python apps that will run under Android.

**This repository branch contains a template for Python 3.8 of PyDK**.
Other Python versions in other branches of repository should not be used, see master repo for those.

Using this template
-------------------

The easiest way to use this project is to not use it at all - at least, not
directly. `Briefcase <https://github.com/beeware/briefcase/>`__ is a tool that
uses this template, rolling it out using data extracted from a
``pyproject.toml`` configuration file.

However, if you *do* want use this template directly...

1. Install `cookiecutter`_. This is a tool used to bootstrap complex project
   templates::

    $ pip install cookiecutter

2. Run ``cookiecutter`` on the template::

    $ cookiecutter https://github.com/pmp-p/pydk-android-gradle-template --checkout 3.8p

    module_name [empty]: 
    bundle [org.beerware]: 
    app_name [EmptyApp]:
    formal_name [org.beerware.empty]:

   This will ask you for a number of details of your application, including the
   `app_name` of your application (which appears under icons and app settings), and
   the `Formal Name` of your application (the full name you use to describe
   your app in your workspace). The remainder of these instructions will assume a `name` of
   ``my-project``, and a formal name of ``My Project``.

3. `Download the Python support package for Android`_, and extract it into
   the ``My Project`` directory generated by the template. This will create
   ``app/libs`` and ``app/src/main/assets`` folders containing a self contained
   Python install.

   Alternatively, you can download the `Python-Android-support`_ project, and
   build your own version.

4. Add your code to the template, into the
   ``My Project/app/src/main/assets/python/app`` directory. At the very minimum,
   you need to have an
   ``My Project/app/src/main/assets/python/app/<app name>/__main__.py`` file
   that instantiates an instance of ``org.beeware.android.IPythonApp``, and
   then invokes ``org.beeware.android.MainActivity.setPythonApp()``, providing
   the ``IPythonApp`` instance.

   If your code has any dependencies, they should be installed into the
   ``My Project/app/src/main/assets/python/app_packages`` directory.

If you've done this correctly, a project with a formal name of ``My Project``,
with an app name of ``my-project`` should have a directory structure that
looks something like::

|-- app
|   |-- build.gradle
|   |-- build.gradle.minimal
|   |-- proguard-rules.pro
|   `-- src
|       `-- main
|           |-- AndroidManifest.xml
|           |-- cpp
|           |   |-- CMakeLists.txt
|           |   |-- ioredir.c
|           |   |-- logger.h
|           |   |-- mod_egl.c
|           |   |-- mod_egl.cpp
|           |   |-- mod_egl.h
|           |   |-- mod_embed.c
|           |   |-- pythonsupport.c
|           |   `-- rmipython.c
|           |-- java
|           |   |-- org.beerware.EmptyApp
|           |       |-- JavaSpace.java
|           |       |-- JniHandler.java
|           |       `-- MainActivity.java
|           `-- res
|-- assets
|   |-- Applications
|   |   `-- README
|   `-- packages
|       `-- README
|-- briefcase.toml
|-- build.gradle
|-- gradle
|   `-- wrapper
|       |-- gradle-wrapper.jar
|       `-- gradle-wrapper.properties
|-- gradle.properties
|-- gradlew
|-- gradlew.bat
|-- settings.gradle


You're now ready to run build and run your project! Set

    $ ./gradlew installDebug

Next steps
----------

Of course, running Python code isn't very interesting by itself - you'll be
able to output to the console, and see that output in Gradle, but if you tap the
app icon on your phone, you won't see anything - because there isn't a visible
console on an Android.

To do something interesting, you'll need to work with the native Android system
libraries to draw widgets and respond to screen taps
by extending the assets/Applications/MainActivity.py

extra external library dependencies : work in progress

.. _cookiecutter: https://github.com/cookiecutter/cookiecutter
.. _Build the Python Android support package: https://github.com/pmp-p/pydk
.. _Download the Python Android support package : not yet


TODO:

    list usefull links for python mobile dev.

